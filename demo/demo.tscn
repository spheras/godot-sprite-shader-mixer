[gd_scene load_steps=4 format=3 uid="uid://btvorthsuc7d1"]

[ext_resource type="Texture2D" uid="uid://dp4mhj7l12nis" path="res://demo/assets/godot-text.png" id="1_e3nkr"]

[sub_resource type="Shader" id="Shader_ldqfi"]
code = "//ATTENTION:
//  THIS IS SHADE AUTOGENERATED BY
//  THE ADDON SPRITE-SHADER-MIXER
//  ANY MANUAL CHANGES WILL BE REMOVED WHEN THE ADDON
//  UPDATES THIS SHADER.
//  ANYWAY, YOU CAN SAVE THE CURRENT VERSION AS A RESOURCE FILE.
//SHADERS:Rainbow,Glitch,Greyscale,
shader_type canvas_item;


//RAINBOW
uniform bool  RAINBOW_active  = false;
uniform float RAINBOW_speed : hint_range(0, 5) = 1;
uniform float RAINBOW_redFactor : hint_range(0, 5) = 3;
uniform float RAINBOW_greenFactor : hint_range(0, 5) = 2;
uniform float RAINBOW_blueFactor : hint_range(0, 5) = 5;
void rainbow(vec2 uv, sampler2D txt, vec2 texturePixelSize, inout vec4 color) {
	color=vec4(color.r+sin(TIME*RAINBOW_redFactor*RAINBOW_speed), color.g+sin(TIME*RAINBOW_greenFactor*RAINBOW_speed), color.b+sin(TIME*RAINBOW_blueFactor*RAINBOW_speed), color.a);
}


//GLITCH
uniform bool  GLITCH_active  = false;
uniform float GLITCH_offset: hint_range(0, 100) = 0;
uniform float GLITCH_speed : hint_range(0, 10) = 1;
uniform float GLITCH_size : hint_range(0.0, 10.0) = 0.75;
uniform float GLITCH_amount : hint_range(0.0, 24.0) = 10.0;
uniform float GLITCH_mix: hint_range(0.0, 1.0)=1.0;
float rand1(vec2 co, float random_seed)
{
    return fract(sin(dot(co.xy * random_seed, vec2(12.,85.5))) * 120.01);
}
float rand2(vec2 co, float random_seed)
{
    float r1 = fract(sin(dot(co.xy * random_seed ,vec2(12.9898, 78.233))) * 43758.5453);
    return fract(sin(dot(vec2(r1 + co.xy * 1.562) ,vec2(12.9898, 78.233))) * 43758.5453);
}
void glitch(in vec2 uv, in sampler2D tex, vec2 texturePixelSize, inout vec4 color) {
	float seed = floor(TIME * GLITCH_speed) / 20.0;
	vec2 blockS = floor(uv * vec2 (GLITCH_offset, 50.) * GLITCH_size) * 2.0;
	vec2  blockL = floor(uv * vec2 (GLITCH_offset, 50.) * GLITCH_size) * 1.3;

	float line_noise = pow(rand2(blockS, seed), 5.0) * GLITCH_amount * pow(rand2(blockL, seed), 3.0);
	
	float negative=-1.;
	float random = rand1(vec2(0.1), seed);
	if(  random < 0.5 ){
		negative=1.;
	}	
	vec4 newColor=texture(tex, uv + vec2 (line_noise * 0.02 * negative * rand1(vec2(2.0), seed), 0));
	color = mix(color,newColor, GLITCH_mix);
}


//GREYSCALE
uniform bool  GREYSCALE_active  = false;
uniform vec3  GREYSCALE_TintColor : source_color = vec3(1.0);
uniform float GREYSCALE_Luminosity : hint_range(-1.0, 1.0) = 0.0;
uniform float GREYSCALE_Blend : hint_range(0.0, 1.0) = 1.0;
void greyscale(vec2 uv, sampler2D txt, vec2 texturePixelSize, inout vec4 color) {
	    // Calcula la luminosidad en blanco y negro
	    float luminance = 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;
	    // Aplica el ajuste de luminosidad
	    luminance = clamp(luminance + GREYSCALE_Luminosity, 0.0, 1.0);
	    // Interpola entre el color original y el color en escala de grises
	    color.rgb = mix(color.rgb, vec3(luminance), GREYSCALE_Blend) * GREYSCALE_TintColor;
}


void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 size = vec2(textureSize(TEXTURE, 0));

	if(RAINBOW_active) rainbow(UV, TEXTURE, TEXTURE_PIXEL_SIZE, color);
	if(GLITCH_active) glitch(UV, TEXTURE, TEXTURE_PIXEL_SIZE, color);
	if(GREYSCALE_active) greyscale(UV, TEXTURE, TEXTURE_PIXEL_SIZE, color);


	COLOR=color;
}	
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uxnye"]
shader = SubResource("Shader_ldqfi")
shader_parameter/RAINBOW_active = true
shader_parameter/RAINBOW_speed = 1.0
shader_parameter/RAINBOW_redFactor = 3.0
shader_parameter/RAINBOW_greenFactor = 2.0
shader_parameter/RAINBOW_blueFactor = 5.0
shader_parameter/GLITCH_active = true
shader_parameter/GLITCH_offset = 0.0
shader_parameter/GLITCH_speed = 1.392
shader_parameter/GLITCH_size = 0.75
shader_parameter/GLITCH_amount = 10.0
shader_parameter/GLITCH_mix = 1.0
shader_parameter/GREYSCALE_active = true
shader_parameter/GREYSCALE_TintColor = Color(1, 1, 1, 1)
shader_parameter/GREYSCALE_Luminosity = 0.0
shader_parameter/GREYSCALE_Blend = 1.0

[node name="Demo" type="Node2D"]

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_uxnye")
texture = ExtResource("1_e3nkr")
